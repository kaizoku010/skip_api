

npm install pdfkit


javascript
Copy code
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const generateTicket = (user, event, filePath) => {
  const doc = new PDFDocument();
  doc.pipe(fs.createWriteStream(filePath));

  doc.fontSize(25).text('Event Ticket', { align: 'center' });
  doc.fontSize(18).text(`Name: ${user.username}`);
  doc.fontSize(18).text(`Email: ${user.email}`);
  doc.fontSize(18).text(`Event: ${event.name}`);
  doc.fontSize(18).text(`Date: ${event.date}`);
  
  doc.end();
};
2. Send the PDF as an Email Attachment
You’ll need to use an email service that supports attachments. For this example, I'll use nodemailer.

Install Nodemailer:
bash
Copy code
npm install nodemailer
Create a Function to Send an Email with Attachment:
javascript
Copy code
const nodemailer = require('nodemailer');

const sendEmailWithAttachment = async (to, subject, text, attachmentPath) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail', // Or another email service provider
    auth: {
      user: 'your-email@example.com',
      pass: 'your-email-password',
    },
  });

  const mailOptions = {
    from: 'your-email@example.com',
    to,
    subject,
    text,
    attachments: [
      {
        filename: path.basename(attachmentPath),
        path: attachmentPath,
      },
    ],
  };

  return transporter.sendMail(mailOptions);
};
3. Integrate Everything in the Event Signup Endpoint
Now, let’s integrate the PDF generation and email sending into your event signup process.

Update Event Signup Endpoint:
javascript
Copy code
const express = require('express');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const PDFDocument = require('pdfkit');
const nodemailer = require('nodemailer');
const Event = require('./models/Event'); // Adjust as necessary
const User = require('./models/User'); // Adjust as necessary

const app = express();
app.use(express.json());

// Generate PDF ticket
const generateTicket = (user, event, filePath) => {
  const doc = new PDFDocument();
  doc.pipe(fs.createWriteStream(filePath));

  doc.fontSize(25).text('Event Ticket', { align: 'center' });
  doc.fontSize(18).text(`Name: ${user.username}`);
  doc.fontSize(18).text(`Email: ${user.email}`);
  doc.fontSize(18).text(`Event: ${event.name}`);
  doc.fontSize(18).text(`Date: ${event.date}`);
  
  doc.end();
};

// Send email with attachment
const sendEmailWithAttachment = async (to, subject, text, attachmentPath) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail', // Or another email service provider
    auth: {
      user: 'your-email@example.com',
      pass: 'your-email-password',
    },
  });

  const mailOptions = {
    from: 'your-email@example.com',
    to,
    subject,
    text,
    attachments: [
      {
        filename: path.basename(attachmentPath),
        path: attachmentPath,
      },
    ],
  };

  return transporter.sendMail(mailOptions);
};

app.post('/sign_up_event/:eventId', asyncHandler(async (req, res) => {
  const { eventId } = req.params;
  const token = req.cookies['auth_token']; // Assuming JWT is stored in cookies

  if (!token) {
    return res.status(401).json({ message: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, jwtSecret);
    const { userId } = decoded;

    // Check if the event exists
    const event = await Event.findOne({ eventId });
    if (!event) {
      return res.status(404).json({ message: 'Event not found' });
    }

    // Check if the user is already signed up
    const user = await User.findOne({ id: userId });
    if (event.participants && event.participants.includes(userId)) {
      return res.status(400).json({ message: 'User already signed up for this event' });
    }

    // Add the user to the event's participants list
    await Event.updateOne(
      { eventId },
      { $push: { participants: userId } }
    );

    // Generate PDF ticket
    const ticketPath = path.join(__dirname, `tickets/${uuidv4()}.pdf`);
    generateTicket(user, event, ticketPath);

    // Send email with ticket
    await sendEmailWithAttachment(user.email, 'Your Event Ticket', 'Please find your event ticket attached.', ticketPath);

    // Clean up ticket file
    fs.unlinkSync(ticketPath);

    res.status(200).json({ message: 'Successfully signed up for the event' });
  } catch (err) {
    console.error('Token verification failed:', err);
    res.status(401).json({ message: 'Invalid token' });
  }
}));


